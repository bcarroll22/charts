{{- $redisHost := include "sentry.redis.host" . -}}
{{- $redisPort := include "sentry.redis.port" . -}}
{{- $redisPass := include "sentry.redis.password" . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "sentry.fullname" . }}-sentry
  labels:
    app: sentry
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  config.yml: |-
    {{- if .Values.system.adminEmail }}
    system.admin-email: {{ .Values.system.adminEmail | quote }}
    {{- end }}
    {{- if .Values.system.url }}
    system.url-prefix: {{ .Values.system.url | quote }}
    {{- end }}

    ###################
    # System Settings #
    ###################
    
    # If this file ever becomes compromised, it's important to generate a new key.
    # Changing this value will result in all current sessions being invalidated.
    # A new key can be generated with `$ sentry config generate-secret-key`
    system.secret-key: env('SENTRY_SECRET_KEY')
    
    # The ``redis.clusters`` setting is used, unsurprisingly, to configure Redis
    # clusters. These clusters can be then referred to by name when configuring
    # backends such as the cache, digests, or TSDB backend.
    redis.clusters:
      default:
        hosts:
          0:
            host: {{ $redisHost | quote }}
            port: {{ $redisPort }}
            {{- if $redisPass }}
            password: {{ $redisPass | quote }}
            {{- end }}

    ################
    # File storage #
    ################
    
    # Uploaded media uses these `filestore` settings. The available
    # backends are either `filesystem` or `s3`.
    filestore.backend: {{ .Values.filestore.backend | quote }}
    {{- if eq .Values.filestore.backend "filesystem" }}
    filestore.options:
      location: {{ .Values.filestore.filesystem.path | quote }}
    {{ end }}
    {{- if eq .Values.filestore.backend "gcs" }}
    filestore.options:
      bucket_name: {{ .Values.filestore.gcs.bucketName | quote }}
    {{ end }}
    {{- if eq .Values.filestore.backend "s3" }}
    filestore.options:
      {{- if .Values.filestore.s3.accessKey }}
      access_key: {{ .Values.filestore.s3.accessKey | quote }}
      {{- end }}
      {{- if .Values.filestore.s3.secretKey }}
      secret_key: {{ .Values.filestore.s3.secretKey | quote }}
      {{- end }}
      {{- if .Values.filestore.s3.bucketName }}
      bucket_name: {{ .Values.filestore.s3.bucketName | quote }}
      {{- end }}
      {{- if .Values.filestore.s3.endpointUrl }}
      endpoint_url: {{ .Values.filestore.s3.endpointUrl | quote }}
      {{- end }}
      {{- if .Values.filestore.s3.signature_version }}
      signature_version: {{ .Values.filestore.s3.signature_version | quote }}
      {{- end }}
      {{- if .Values.filestore.s3.region_name }}
      region_name: {{ .Values.filestore.s3.region_name | quote }}
      {{- end }}
      {{- if .Values.filestore.s3.default_acl }}
      default_acl: {{ .Values.filestore.s3.default_acl | quote }}
      {{- end }}
      #add comfig params for s3
      {{- if .Values.filestore.s3.addressing_style }}
      addressing_style: {{ .Values.filestore.s3.addressing_style | quote }}
      {{- end }}
      {{- if .Values.filestore.s3.location }}
      location: {{ .Values.filestore.s3.location | quote }}
      {{- end }}
    {{ end }}

    # This URL will be used to tell Symbolicator where to obtain the Sentry source.
    # See https://getsentry.github.io/symbolicator/api/
    system.internal-url-prefix: 'http://{{ template "sentry.fullname" . }}-web:{{ .Values.service.externalPort }}'
    symbolicator.enabled: {{ .Values.symbolicator.enabled }}
    {{- if .Values.symbolicator.enabled }}
    symbolicator.options:
      url: "http://{{ template "sentry.fullname" . }}-symbolicator:{{ template "symbolicator.port" }}"
    {{- end }}

    ######################
    # GitHub Integration #
    ######################
    
    {{- with .Values.github.appId }}
    github-app.id: {{ . }}
    {{- end }}
    {{- with .Values.github.appName }}
    github-app.name: {{ . | quote }}
    {{- end }}
    {{- if not .Values.github.existingSecret }}
      {{- with .Values.github.privateKey }}
    github-app.private-key: {{- . | toYaml | indent 4 }}
      {{- end }}
      {{- with .Values.github.webhookSecret }}
    github-app.webhook-secret: {{ . | quote }}
      {{- end }}
      {{- with .Values.github.clientId }}
    github-app.client-id: {{ . | quote }}
      {{- end }}
      {{- with .Values.github.clientSecret }}
    github-app.client-secret: {{ . | quote }}
      {{- end }}
    {{- end }}

    ######################
    # Google Integration #
    ######################
    
    {{- if .Values.google.clientId }}
    auth-google.client-id: {{ .Values.google.clientId | quote }}
    auth-google.client-secret: {{ .Values.google.clientSecret | quote }}
    {{ end }}

    #####################
    # Slack Integration #
    #####################
    
    {{- if and (.Values.slack.clientId) (.Values.slack.clientSecret) (.Values.slack.signingSecret) (not .Values.slack.existingSecret) }}
    slack.client-id: {{ .Values.slack.clientId | quote }}
    slack.client-secret: {{ .Values.slack.clientSecret | quote }}
    slack.signing-secret: {{ .Values.slack.signingSecret | quote }}
    {{ end }}

    {{- if .Values.config.configYml }}
{{ .Values.config.configYml | toYaml | indent 4 }}
    {{- end }}
  sentry.conf.py: |-
    from sentry.conf.server import *  # NOQA
    from distutils.util import strtobool

    BYTE_MULTIPLIER = 1024
    UNITS = ("K", "M", "G")
    def unit_text_to_bytes(text):
        unit = text[-1].upper()
        power = UNITS.index(unit) + 1
        return float(text[:-1])*(BYTE_MULTIPLIER**power)

    DATABASES = {
        "default": {
            "ENGINE": "sentry.db.postgres",
            "NAME": {{ include "sentry.postgresql.database" . | quote }},
            "USER": {{ include "sentry.postgresql.username" . | quote }},
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD", ""),
            "HOST": {{ include "sentry.postgresql.host" . | quote }},
            "PORT": {{ template "sentry.postgresql.port" . }},
            {{- if .Values.externalPostgresql.sslMode }}
            'OPTIONS': {
                'sslmode': '{{ .Values.externalPostgresql.sslMode }}',
            },
            {{- end }}
        }
    }

    # You should not change this setting after your database has been created
    # unless you have altered all schemas first
    SENTRY_USE_BIG_INTS = True

    ###########
    # General #
    ###########

    # Instruct Sentry that this install intends to be run by a single organization
    # and thus various UI optimizations should be enabled.
    SENTRY_SINGLE_ORGANIZATION = {{ if .Values.sentry.singleOrganization }}True{{ else }}False{{ end }}

    SENTRY_OPTIONS["system.event-retention-days"] = int(
        env('SENTRY_EVENT_RETENTION_DAYS') or {{ .Values.sentry.cleanup.days | quote }}
    )

    #########
    # Redis #
    #########
    
    # Generic Redis configuration used as defaults for various things including:
    # Buffers, Quotas, TSDB

    SENTRY_OPTIONS["redis.clusters"] = {
        "default": {
            "hosts": {0: {"host": {{ $redisHost | quote }}, "password": {{ $redisPass | quote }}, "port": {{ $redisPort }}, "db": "0"}}
        }
    }

    #########
    # Queue #
    #########

    # See https://docs.getsentry.com/on-premise/server/queue/ for more
    # information on configuring your queue broker and workers. Sentry relies
    # on a Python framework called Celery to manage queues.

    {{- if or (.Values.rabbitmq.enabled) (.Values.rabbitmq.host) }}
    BROKER_URL = os.environ.get("BROKER_URL", "amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@{{ template "sentry.rabbitmq.host" . }}:5672/{{ .Values.rabbitmq.vhost }}")
    {{- else if $redisPass }}
    BROKER_URL = os.environ.get("BROKER_URL", "redis://:{{ $redisPass }}@{{ $redisHost }}:{{ $redisPort }}/0")
    {{- else }}
    BROKER_URL = os.environ.get("BROKER_URL", "redis://{{ $redisHost }}:{{ $redisPort }}/0")
    {{- end }}

    #########
    # Cache #
    #########

    {{- if .Values.sourcemaps.enabled }}
    # Sentry currently utilizes two separate mechanisms. While CACHES is not a
    # requirement, it will optimize several high throughput patterns.
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.memcached.MemcachedCache",
            "LOCATION": ["{{ template "sentry.fullname" . }}-memcached:11211"],
            "TIMEOUT": 3600,
            "OPTIONS": {
                "server_max_value_length": unit_text_to_bytes(env("SENTRY_MAX_EXTERNAL_SOURCEMAP_SIZE", "1M")),
            },
        }
    }
    {{- end }}

    # A primary cache is required for things such as processing events
    SENTRY_CACHE = "sentry.cache.redis.RedisCache"

    DEFAULT_KAFKA_OPTIONS = {
        "bootstrap.servers": {{ (include "sentry.kafka.bootstrap_servers_string" .) | quote }},
        "message.max.bytes": 50000000,
        "socket.timeout.ms": 1000,
    }

    SENTRY_EVENTSTREAM = "sentry.eventstream.kafka.KafkaEventStream"
    SENTRY_EVENTSTREAM_OPTIONS = {"producer_configuration": DEFAULT_KAFKA_OPTIONS}

    KAFKA_CLUSTERS["default"] = DEFAULT_KAFKA_OPTIONS

    ###############
    # Rate Limits #
    ###############

    # Rate limits apply to notification handlers and are enforced per-project
    # automatically.

    SENTRY_RATELIMITER = "sentry.ratelimits.redis.RedisRateLimiter"

    ##################
    # Update Buffers #
    ##################

    # Buffers (combined with queueing) act as an intermediate layer between the
    # database and the storage API. They will greatly improve efficiency on large
    # numbers of the same events being sent to the API in a short amount of time.
    # (read: if you send any kind of real data to Sentry, you should enable buffers)

    SENTRY_BUFFER = "sentry.buffer.redis.RedisBuffer"

    ##########
    # Quotas #
    ##########

    # Quotas allow you to rate limit individual projects or the Sentry install as
    # a whole.

    SENTRY_QUOTAS = "sentry.quotas.redis.RedisQuota"

    ########
    # TSDB #
    ########

    # The TSDB is used for building charts as well as making things like per-rate
    # alerts possible.

    SENTRY_TSDB = "sentry.tsdb.redissnuba.RedisSnubaTSDB"

    #########
    # SNUBA #
    #########

    SENTRY_SEARCH = "sentry.search.snuba.EventsDatasetSnubaSearchBackend"
    SENTRY_SEARCH_OPTIONS = {}
    SENTRY_TAGSTORE_OPTIONS = {}

    ###########
    # Digests #
    ###########

    # The digest backend powers notification summaries.

    SENTRY_DIGESTS = "sentry.digests.backends.redis.RedisBackend"

    ##############
    # Web Server #
    ##############

    SENTRY_WEB_HOST = "0.0.0.0"
    SENTRY_WEB_PORT = 9000
    SENTRY_WEB_OPTIONS = {
        "http": "%s:%s" % (SENTRY_WEB_HOST, SENTRY_WEB_PORT),
        "protocol": "uwsgi",
        # This is needed in order to prevent https://github.com/getsentry/sentry/blob/c6f9660e37fcd9c1bbda8ff4af1dcfd0442f5155/src/sentry/services/http.py#L70
        "uwsgi-socket": None,
        "so-keepalive": True,
        # Keep this between 15s-75s as that's what Relay supports
        "http-keepalive": {{ .Values.config.web.httpKeepalive }},
        "http-chunked-input": True,
        # the number of web workers
        "workers": 3,
        "threads": 4,
        "memory-report": False,
        # Some stuff so uwsgi will cycle workers sensibly
        "max-requests": 100000,
        "max-requests-delta": 500,
        "max-worker-lifetime": 86400,
        # Duplicate options from sentry default just so we don't get
        # bit by sentry changing a default value that we depend on.
        "thunder-lock": True,
        "log-x-forwarded-for": False,
        "buffer-size": 32768,
        "limit-post": 209715200,
        "disable-logging": True,
        "reload-on-rss": 600,
        "ignore-sigpipe": True,
        "ignore-write-errors": True,
        "disable-write-exception": True,
    }

    ###########
    # SSL/TLS #
    ###########

    # If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
    # header and enable the settings below

    # SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
    # SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

    # End of SSL/TLS settings

    ############
    # Features #
    ############
    
    SENTRY_FEATURES["auth:register"] = {{ .Values.auth.register | ternary "True" "False" }}
    SENTRY_FEATURES["projects:sample-events"] = False
    SENTRY_FEATURES.update(
        {
            feature: True
            for feature in (
                {{- if not .Values.sentry.singleOrganization }}
                "organizations:create",
                {{ end -}}
                "organizations:discover",
                "organizations:events",
                "organizations:global-views",
                "organizations:incidents",
                "organizations:integrations-issue-basic",
                "organizations:integrations-issue-sync",
                "organizations:invite-members",
                "organizations:metric-alert-builder-aggregate",
                {{- if .Values.sentry.features.vstsLimitedScopes }}
                "organizations:integrations-vsts-limited-scopes",
                {{ end -}}
                "organizations:invite-members",
                "organizations:metric-alert-builder-aggregate",

                # Leave these per discussion in https://github.com/sentry-kubernetes/charts/pull/800
                "organizations:metrics",
                "organizations:metrics-extraction",
                "organizations:transaction-metrics-extraction",
                
                {{- if .Values.sentry.features.orgSubdomains }}
                "organizations:org-subdomains",
                {{ end -}}
                "organizations:sso-basic",
                "organizations:sso-rippling",
                "organizations:sso-saml2",
                "organizations:performance-view",
                "organizations:advanced-search",
                "organizations:session-replay",
                "organizations:profiling",
                "projects:custom-inbound-filters",
                "projects:data-forwarding",
                "projects:discard-groups",
                "projects:plugins",
                "projects:rate-limits",
                "projects:servicehooks",
            )
        }
    )

    #######################
    # Email Configuration #
    #######################

    SENTRY_OPTIONS['mail.backend'] = os.getenv("SENTRY_EMAIL_BACKEND", {{ .Values.mail.backend | quote }})
    SENTRY_OPTIONS['mail.use-tls'] = bool(strtobool(os.getenv("SENTRY_EMAIL_USE_TLS", {{ .Values.mail.useTls | quote }})))
    SENTRY_OPTIONS['mail.use-ssl'] = bool(strtobool(os.getenv("SENTRY_EMAIL_USE_SSL", {{ .Values.mail.useSsl | quote }})))
    SENTRY_OPTIONS['mail.username'] = os.getenv("SENTRY_EMAIL_USERNAME", {{ .Values.mail.username | quote }})
    SENTRY_OPTIONS['mail.password'] = os.getenv("SENTRY_EMAIL_PASSWORD", "")
    SENTRY_OPTIONS['mail.port'] = int(os.getenv("SENTRY_EMAIL_PORT", {{ .Values.mail.port | quote }}))
    SENTRY_OPTIONS['mail.host'] = os.getenv("SENTRY_EMAIL_HOST", {{ .Values.mail.host | quote }})
    SENTRY_OPTIONS['mail.from'] = os.getenv("SENTRY_EMAIL_FROM", {{ .Values.mail.from | quote }})

    #######################
    # MaxMind Integration #
    #######################

    {{- if .Values.geodata.path }}
    GEOIP_PATH_MMDB = {{ .Values.geodata.path | quote }}
    {{- end }}
    
    #########################
    # Bitbucket Integration #
    #########################
    
    # BITBUCKET_CONSUMER_KEY = 'YOUR_BITBUCKET_CONSUMER_KEY'
    # BITBUCKET_CONSUMER_SECRET = 'YOUR_BITBUCKET_CONSUMER_SECRET'

    ##############################################
    # Suggested Fix Feature / OpenAI Integration #
    ##############################################
    
    # See https://docs.sentry.io/product/issues/issue-details/ai-suggested-solution/
    # for more information about the feature. Make sure the OpenAI's privacy policy is
    # aligned with your company.
    
    # Set the OPENAI_API_KEY on the .env or .env.custom file with a valid
    # OpenAI API key to turn on the feature.
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
    
    if OPENAI_API_KEY:
      SENTRY_FEATURES["organizations:open-ai-suggestion"] = True
    
    ##############################################
    # Content Security Policy settings
    ##############################################
    
    if "csp.middleware.CSPMiddleware" not in MIDDLEWARE:
        MIDDLEWARE = ("csp.middleware.CSPMiddleware",) + MIDDLEWARE
    # CSP_REPORT_URI = "https://{your-sentry-installation}/api/{csp-project}/security/?sentry_key={sentry-key}"
    CSP_REPORT_ONLY = True
    
    # optional extra permissions
    # https://django-csp.readthedocs.io/en/latest/configuration.html
    # CSP_SCRIPT_SRC += ["example.com"]

    {{- if .Values.metrics.enabled }}
    SENTRY_METRICS_BACKEND = 'sentry.metrics.statsd.StatsdMetricsBackend'
    SENTRY_METRICS_OPTIONS = {
        'host': '{{ template "sentry.fullname" . }}-metrics',
        'port': 9125,
    }
    {{- end }}

    {{- if .Values.slack.existingSecret }}
    #########
    # Slack #
    #########
    
    SENTRY_OPTIONS['slack.client-id'] = os.environ.get("SLACK_CLIENT_ID")
    SENTRY_OPTIONS['slack.client-secret'] = os.environ.get("SLACK_CLIENT_SECRET")
    SENTRY_OPTIONS['slack.signing-secret'] = os.environ.get("SLACK_SIGNING_SECRET")
    {{- end }}

    {{- if .Values.github.existingSecret }}
    ##########
    # Github #
    ##########
    
    SENTRY_OPTIONS['github-app.private-key'] = os.environ.get("GITHUB_APP_PRIVATE_KEY")
    SENTRY_OPTIONS['github-app.webhook-secret'] = os.environ.get("GITHUB_APP_WEBHOOK_SECRET")
    SENTRY_OPTIONS['github-app.client-id'] = os.environ.get("GITHUB_APP_CLIENT_ID")
    SENTRY_OPTIONS['github-app.client-secret'] = os.environ.get("GITHUB_APP_CLIENT_SECRET")
    {{- end }}

{{ .Values.config.sentryConfPy | indent 4 }}
